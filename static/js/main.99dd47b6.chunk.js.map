{"version":3,"sources":["components/ResultsPage.js","components/LandingPage.js","components/Maze.js","App.js","serviceWorker.js","index.js"],"names":["ResultsPage","props","className","userName","quote","type","LandingPage","handleNameChange","e","setState","target","value","handleQuestionChange","questionArray","trim","split","userQuestion","clickHandler","storeUserQuestion","state","storeUserName","src","alt","action","htmlFor","placeholder","id","onChange","this","onClick","Component","Maze","ctx","refs","canvas","getContext","forEach","y","yIndex","x","xIndex","fillStyle","fillRect","ref","width","height","App","userNameInput","preventDefault","name","question","returnedKeyword","getRandomWord","keyWord","Math","floor","random","length","includes","axios","url","then","response","data","message","slip","advice","isLandingShown","isMazeShown","randomIndex","slips","isResultsShown","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.99dd47b6.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport '../styles/ResultsPage.css'\n\n// stateless component\nconst ResultsPage = (props) => {\n  return (\n    <Fragment>\n      <div className=\"wrapper\">\n        <div className=\"nygmaContainer\">\n          {/* image here :) - image of Nygma Machine\n            will need to figure out what the Nygma Machine looks  */}\n            \n          <div className=\"quoteContainer\">\n            <p className=\"resultsName\">{`${props.userName},`}</p>\n            <p className=\"resultsQuote\">{props.quote}</p> \n          </div>\n          \n          <button type=\"button\">Play Again?</button>\n          <button type=\"button\">Leaderboard</button>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default ResultsPage;","import React, { Component, Fragment } from 'react';\nimport '../styles/LandingPage.css'\nimport ResultsPage from './ResultsPage';\n\nclass LandingPage extends Component {\n  constructor(){\n    super();\n    \n    this.state = {\n      userName: '',\n      userQuestion: [],\n    }\n  }\n\n  handleNameChange = (e) => {\n    this.setState({\n      userName: e.target.value,\n    })\n  }\n  \n  handleQuestionChange = (e) => {\n    const questionString= e.target.value;\n    // taking the question and converting it to an array\n    const questionArray = questionString.trim().split(' ');\n    \n    this.setState({\n      userQuestion: questionArray,\n    })\n  }\n\n  clickHandler = (e) => {\n    this.props.storeUserQuestion(e, this.state.userQuestion);\n    this.props.storeUserName(e, this.state.userName);\n  }\n\n  \n  render() {\n    return (\n        <main className=\"wrapper\">\n          <header>\n            <h1>Welcome to the Nygma Machine</h1>\n            <h2>Ask your question for some advice</h2>\n            <div className=\"imageContainer\">\n              <img src=\"\" alt=\"\"/>\n            </div>\n          </header>\n          <form action=\"\">\n            <label htmlFor=\"\">What's your name?</label>\n            <input type=\"text\" placeholder=\"Batman\" id=\"userName\" onChange={this.handleNameChange} />\n            <label htmlFor=\"\">Ask your question</label>\n            <input type=\"text\" placeholder=\"Does the Joker think I'm cute?\" id=\"userQuestion\" onChange={this.handleQuestionChange}/>\n            <button type=\"submit\"\n            onClick={this.clickHandler}>Submit</button>\n          </form>\n        </main>\n    )\n  }\n}\n\nexport default LandingPage;","import React, {Component} from 'react';\nimport '../styles/Maze.css'\n\nclass Maze extends Component {\n  constructor(){\n    super();\n    this.state = {\n\n    }\n  }\n\n  componentDidMount(){\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext('2d');\n    const maze = [\n      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],\n      [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1],\n      [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0],\n      [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1],\n      [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1],\n      [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1],\n      [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1],\n      [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],\n      [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1],\n      [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],\n      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    ]\n\n    // used a forEach nbd\n    // nested forEach iterates through nested array\n    // if array value is 0, it is a clear path for the character div\n    // if array value is 1, it is a wall that the character div cannot move through\n    // we use value parameter to iterate through all of the nested arrays\n    // we use the index parameter to indicate position in our conditional statements\n    maze.forEach((y, yIndex) => {\n      y.forEach((x, xIndex) => {\n        if (x === 1) {\n          ctx.fillStyle = \"darkgreen\";\n          ctx.fillRect(xIndex * 50, yIndex * 50, 50, 50);\n        }\n        else if (x === 0) {\n          ctx.fillStyle = \"pink\";\n          ctx.fillRect(xIndex * 50, yIndex * 50, 50, 50);\n        } \n        else if (x === -1) {\n          ctx.fillStyle = \"blue\";\n          ctx.fillRect(xIndex * 50, yIndex * 50, 50, 50);          \n        };\n      })\n    })\n  }\n\n  \n  \n  render(){\n    return(\n      <div className=\"maze\">\n        <h3>maze is here</h3>\n        <canvas ref=\"canvas\" width=\"600px\" height=\"600px\"></canvas>\n        {/* <button onClick=\"\">take me to next page</button> */}\n      </div>\n    )\n  }\n}\n\nexport default Maze;","import React, {Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport LandingPage from './components/LandingPage';\nimport Maze from './components/Maze'\nimport ResultsPage from './components/ResultsPage';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      isLandingShown: true,\n      isMazeShown: false,\n      isResultsShown: false,\n      quote: '',\n      name: '',\n    }\n  }\n\n  storeUserName = (e, userNameInput) => {\n    e.preventDefault();\n    this.setState({\n      name: userNameInput,\n    })\n  }\n\n  storeUserQuestion = (e, question) => {\n    e.preventDefault();\n\n    // (recursion function)\n    // we use the randomIndex variable to choose a random word from the user's question string array\n    // we use the 'badWords' array to remove common words from the axios lookup value\n    // if the randomly generated word exists in the badWords array, it'll rerun the function to find a new random word in the user's question string array\n    // if the randomly generated word doesn't exist in the badWords array, it'll be used as the lookup value in the axios call\n    const getRandomWord = (question) => {\n      const randomIndex = Math.floor(Math.random() * question.length);\n      const badWords = [\n        // common\n        \"the\", \"to\", \"and\", \"then\", \"this\", \"of\", \"is\", \"if\", \"it\", \"so\", \"a\", \"is\", \"maybe\", \"on\", \"for\",\n        // pronouns\n        \"i\", \"i'm\", \"me\", \"you\", \"them\", \"they\", \"we\", \"it\",\n        // grammar (revist this)\n        \"!\", \"'\", \"\\\"\",\n      ]\n\n      const keyWord = question[randomIndex];\n      const keyWordLookup = badWords.includes(keyWord);\n\n      if (keyWordLookup === false) {\n        return keyWord;\n      }\n\n      getRandomWord(question);\n    }\n\n    // storing the lookup value into a variable, used in the axios call\n    const returnedKeyword = getRandomWord(question);\n\n    axios({\n      url: `https://api.adviceslip.com/advice/search/${returnedKeyword}`,\n    }).then((response) => {\n\n      // if the initial axios call doesn't have a quote for the lookup value, it'll generate a random advice string\n      // otherwise, the axios call will return a random advice string related to the lookup value\n      // in both instances, the random advice string is stored in state, to be returned to the App.js component\n      if (response.data.message) {\n        axios({\n          url: 'https://api.adviceslip.com/advice',\n        }).then((response) => {\n          this.setState({\n            quote: response.data.slip.advice,\n            isLandingShown: !this.state.isLandingShown,\n            isMazeShown: !this.state.isMazeShown,\n          });\n        })\n\n      } else {\n        const randomIndex = Math.floor(Math.random() * response.data.slips.length);\n        this.setState({\n          quote: response.data.slips[randomIndex].advice,\n          isLandingShown: !this.state.isLandingShown,\n          isMazeShown: !this.state.isMazeShown,\n        });\n      }\n    });\n  }\n\n  \n  \n  render(){\n    return (\n      <div className=\"App\">\n        {/* {this.state.isLandingShown && this.state.isMazeShown === false && this.state.isResultsShown === false ? <LandingPage /> : null } */}\n        {this.state.isLandingShown ? <LandingPage storeUserQuestion={this.storeUserQuestion} storeUserName={this.storeUserName} />\n        : this.state.isMazeShown ? <Maze />\n        : this.state.isResultsShown ? <ResultsPage quote={this.state.quote} userName={this.state.name} />\n        : null }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}